/**
 * This script transforms all literals to lowercased, trims, and removes all duplicates
 * inside a mappings file (generated by the merge script).
 *
 * SYNTAX: ts-node ./scripts/post-process.ts MAPPINGS VERBOSE
 *
 * @param MAPPINGS The path to the mappings file
 * @param VERBOSE If provided, this script logs all identical hashes
 *
 * EXAMPLE: ts-node ./scripts/post-process.ts ./mappings/amco_nl.csv --verbose
 */
import path from 'path';
import csv from 'csvtojson';
import { Parser } from 'json2csv';
import fs from 'fs';

const target = path.resolve(__dirname, '..', process.argv[2]);
const verbose: boolean = !! process.argv[3] && (process.argv[3].trim().toLowerCase() === '--verbose' || process.argv[3].trim().toLowerCase() === '-v');
const hashTable: { [hash: string]: boolean } = {};
let counter: number = 0;

csv()
.fromFile(target, { encoding: 'utf8' })
.then((mappings: Mappings) => {

  for ( let i = 0; i < mappings.length; i++ ) {

    const row = mappings[i];

    // Transform literal
    row.literal = row.literal.toLowerCase().trim();

    // Get hash
    const hash = `${row.literal}:${row.code.trim()}`;

    // Delete duplicate
    if ( hashTable[hash] ) {

      if ( verbose ) console.log(hash);

      mappings.splice(i, 1);
      i--;
      counter++;

    }
    // Register otherwise
    else {

      hashTable[hash] = true;

    }

  }

  console.log(`Deleted ${counter} duplicates`);

  // Write to file
  fs.writeFileSync(target, (new Parser()).parse(mappings), { encoding: 'utf8' });

});

type Mappings = MappingEntry[];

interface MappingEntry {

  literal: string;
  code: string;
  contributor: string;
  [metadata: string]: string;

}
